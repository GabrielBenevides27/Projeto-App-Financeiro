unit cUser;

interface

uses FireDac.Comp.Client, FireDac.DApt, System.SysUtils, FMX.Graphics, FUniMainModule;

type
       TUser = class
    private
        Fconn: TFDConnection;
        FIND_LOGIN: String;
        FEMAIL: string;
        FSENHA: string;
        FNOME: string;
        FID_USUARIO: Integer;
        FICONE: TBitmap;
        FFOTO: TBitmap;


    public
        constructor Create(conn: TFDConnection);
        property ID_USUARIO: Integer read FID_USUARIO write FID_USUARIO;
        property NOME: string read FNOME write FNOME;
        property EMAIL: string read FEMAIL write FEMAIL;
        property SENHA: string read FSENHA write FSENHA;
        property ICONE: TBitmap read FICONE write FICONE;
        property IND_LOGIN: String read FIND_LOGIN write FIND_LOGIN;
        property FOTO: TBitmap read FFOTO write FFOTO;

        function ListarUsuario(out erro: string): TFDQuery;
        function Inserir(out erro: string): Boolean;
        function Alterar(out erro: string): Boolean;
        function Excluir(out erro: string): Boolean;
        function ExcluirTodosLancamentos(out erro: string): Boolean;
        function validarLogin(out erro: string): Boolean;
        function logout(out erro: string): Boolean;
       end;

implementation

uses
  System.Classes;

{ TUser }

constructor TUser.Create(conn: TFDConnection);
begin
    Fconn := conn;
end;

function TUser.Inserir(out erro: string): Boolean;
var
    qry : TFDQuery;
begin
    // Validacoes...
    if NOME = '' then
    begin
        erro := 'Informe o nome do usuário!';
        Result := false;
        exit;
    end;

    if EMAIL = '' then
    begin
        erro := 'Informe o email do usuário!';
        Result := false;
        exit;
    end;

    if SENHA = '' then
    begin
        erro := 'Informe a senha do usuário!';
        Result := false;
        exit;
    end;


    try
        try
            qry := TFDQuery.Create(nil);
            qry.Connection := Fconn;

            with qry do
            begin
                Active := false;
                SQL.Clear;
                SQL.Add('INSERT INTO TAB_USUARIO(NOME, EMAIL, SENHA, IND_LOGIN, FOTO)');
                SQL.Add('VALUES(:NOME, :EMAIL, :SENHA, :IND_LOGIN, :FOTO)');
                ParamByName('NOME').Value := NOME;
                ParamByName('EMAIL').Value := EMAIL;
                ParamByName('SENHA').Value := SENHA;
                ParamByName('IND_LOGIN').Value := IND_LOGIN;
                ParamByName('FOTO').Assign(FOTO);
                ExecSQL;
            end;

            Result := true;
            erro := '';

        except on ex:exception do
        begin
            Result := False;
            erro := 'Erro ao inserir usuário: ' + ex.Message;
        end;
        end;

    finally
        qry.DisposeOf;
    end;
end;

function TUser.Alterar(out erro: string): Boolean;
var
    qry : TFDQuery;
begin
    // Validacoes...
    if NOME = '' then
    begin
        erro := 'Informe o nome do usuário!';
        Result := false;
        exit;
    end;

    if EMAIL = '' then
    begin
        erro := 'Informe o email do usuário!';
        Result := false;
        exit;
    end;

    if SENHA = '' then
    begin
        erro := 'Informe a senha do usuário!';
        Result := false;
        exit;
    end;


    try
        try
            qry := TFDQuery.Create(nil);
            qry.Connection := Fconn;

            with qry do
            begin
                Active := false;
                SQL.Clear;
                SQL.Add('UPDATE TAB_USUARIO SET NOME=:NOME, SENHA=:SENHA, EMAIL=:EMAIL, IND_LOGIN=:IND_LOGIN, FOTO=:FOTO');
                SQL.Add('WHERE ID_USUARIO = :ID_USUARIO');
                ParamByName('ID_USUARIO').Value := ID_USUARIO;
                ParamByName('NOME').Value := NOME;
                ParamByName('SENHA').Value := SENHA;
                ParamByName('EMAIL').Value := EMAIL;
                ParamByName('IND_LOGIN').Value := IND_LOGIN;
                ParamByName('FOTO').Assign(FOTO);
                ExecSQL;
            end;

            Result := true;
            erro := '';

        except on ex:exception do
        begin
            Result := False;
            erro := 'Erro ao alterar o cadastro do usuário: ' + ex.Message;
        end;
        end;

    finally
        qry.DisposeOf;
    end;
end;

function TCategoria.ExcluirTodasCategorias(out erro: string): Boolean;
var
    qry : TFDQuery;
begin
    // Validacoes...

    try
        try
            qry := TFDQuery.Create(nil);
            qry.Connection := Fconn;

            with qry do
            begin
                Active := false;
                SQL.Clear;
                SQL.Add('DELETE FROM TAB_CATEGORIA');
                ExecSQL;
            end;

            Result := true;
            erro := '';

        except on ex:exception do
        begin
            Result := False;
            erro := 'Erro ao excluir lançamento: ' + ex.Message;
        end;
        end;

    finally
        qry.DisposeOf;
    end;
end;

function TUser.ExcluirTodosLancamentos(out erro: string): Boolean;
var
    qry : TFDQuery;
begin
    // Validacoes...

    try
        try
            qry := TFDQuery.Create(nil);
            qry.Connection := Fconn;

            with qry do
            begin
                Active := false;
                SQL.Clear;
                SQL.Add('DELETE FROM TAB_LANCAMENTO');
                SQL.Add('WHERE 1 = 1');
                ExecSQL;
            end;

            Result := true;
            erro := '';

        except on ex:exception do
        begin
            Result := False;
            erro := 'Erro ao excluir o lançamento: ' + ex.Message;
        end;
        end;

    finally
        qry.DisposeOf;
    end;
end;

function TUser.Excluir(out erro: string): Boolean;
var
    qry : TFDQuery;
begin

    try
        try
            qry := TFDQuery.Create(nil);
            qry.Connection := Fconn;

            with qry do
            begin
                Active := false;
                SQL.Clear;
                SQL.Add('DELETE FROM TAB_USUARIO');
                SQL.Add('WHERE 1 = 1');

                if ID_USUARIO > 0 then
                begin
                  SQL.Add('AND ID_USUARIO = :ID_USUARIO');
                  ParamByName('ID_USUARIO').Value := ID_USUARIO;
                end;

                if EMAIL <> '' then
                begin
                  SQL.Add('AND EMAIL = :EMAIL');
                  ParamByName('EMAIL').Value := EMAIL;
                end;

                if SENHA <> '' then
                begin
                  SQL.Add('AND SENHA = :SENHA');
                  ParamByName('SENHA').Value := SENHA;
                end;

                ExecSQL;
            end;

            Result := true;
            erro := '';

        except on ex:exception do
        begin
            Result := False;
            erro := 'Erro ao excluir o cadastro do usuário: ' + ex.Message;
        end;
        end;

    finally
        qry.DisposeOf;
    end;
end;

function TUser.ListarUsuario(out erro: string): TFDQuery;
var
    qry : TFDQuery;
begin
    try
        qry := TFDQuery.Create(nil);
        qry.Connection := Fconn;

        with qry do
        begin
            Active := false;
            sql.Clear;
            sql.Add('SELECT * FROM TAB_USUARIO');

            if ID_USUARIO > 0 then
            begin
                SQL.Add('WHERE ID_USUARIO = :ID_USUARIO');
                ParamByName('ID_USUARIO').Value := ID_USUARIO;
            end;

            Active := true;
        end;

        Result := qry;
        erro := '';

    except on ex:exception do
    begin
        Result := nil;
        erro := 'Erro ao consultar o cadastro do usuário: ' + ex.Message;
    end;
    end;
end;

function TUser.validarLogin(out erro: string): Boolean;
var
    qry : TFDQuery;
begin

    if EMAIL = '' then
    begin
        erro := 'Informe o email do usuário!';
        Result := false;
        exit;
    end;

    if SENHA = '' then
    begin
        erro := 'Informe a senha do usuário!';
        Result := false;
        exit;
    end;

    try
      qry := TFDQuery.Create(nil);
      qry.Connection := Fconn;
      try
          with qry do
          begin
            Active := false;
            sql.Clear;
            sql.Add('SELECT * FROM TAB_USUARIO');
            SQL.Add('WHERE EMAIL = :EMAIL');
            SQL.Add('AND SENHA = :SENHA');
            ParamByName('EMAIL').Value := EMAIL;
            ParamByName('SENHA').Value := SENHA;
            Active := true;


            if qry.RecordCount = 0 then
            begin
              Result := false;
              erro := 'Email ou senha inválida!';
              exit;
            end;

            Active := false;
            sql.Clear;
            sql.Add('UPDATE TAB_USUARIO');
            SQL.Add('SET IND_LOGIN = "S"');
            ExecSQL;
          end;

          Result := true;
          erro := '';

      except on ex:exception do
      begin
            Result := False;
            erro := 'Erro ao consultar o cadastro do usuário: ' + ex.Message;
      end;
    end;

    finally
      qry.DisposeOf;
    end;
end;

function TUser.logout(out erro: string): Boolean;
var
    qry : TFDQuery;
begin

    try
      qry := TFDQuery.Create(nil);
      qry.Connection := Fconn;
      try
          with qry do
          begin
            Active := false;
            sql.Clear;
            sql.Add('UPDATE TAB_USUARIO');
            SQL.Add('SET IND_LOGIN = "N"');
            ExecSQL;
          end;

          Result := true;
          erro := '';

      except on ex:exception do
      begin
            Result := False;
            erro := 'Erro ao sair: ' + ex.Message;
      end;
    end;

    finally
      qry.DisposeOf;
    end;
end;

end.
